//Date and Time
//Server Code
public class Server {
    public static void main(String[] args) throws IOException {
        try {
            LocalDateTime dt = LocalDateTime.now();
            System.out.println("Server is ready.");
            ServerSocket ss = new ServerSocket(1313);
            Socket soc = ss.accept();
            System.out.println("Client has requested to supply the time");
            PrintWriter out = new PrintWriter(soc.getOutputStream(), true);
            out.println("Time and date is: " + dt);
            ss.close();
        } catch (Exception e) {
            // TODO: handle exception
            System.out.println(e);
        }
    }
}
//Client Code
public class Client {
    public static void main(String[] args) throws IOException {
        try {
            System.out.println("Client has requested.");
            Socket soc = new Socket("localhost", 1313);
            BufferedReader in = new BufferedReader(new InputStreamReader(soc.getInputStream()));
            System.out.println(in.readLine());
            soc.close();
        } catch (Exception e) {
            // TODO: handle exception
            System.out.println(e);
        }
    }    
}


//Echo
//Server Code
public class EchoServer {
    public static void main(String[] args) throws IOException {
        try {
            System.out.println("Server has started....");
            ServerSocket ss = new ServerSocket(1313);
            Socket soc = ss.accept();
            for(;;){
                System.out.println("Client has send the msg.");
                BufferedReader in = new BufferedReader(new InputStreamReader(soc.getInputStream()));
                String str = in.readLine();
                PrintWriter out = new PrintWriter(soc.getOutputStream(), true);
                out.println("Server says: " + str);
            }
        } catch (Exception e) {
            // TODO: handle exception
            System.out.println(e);
        }
    }
}
//Client Code
public class EchoClient {
    public static void main(String[] args) throws IOException {
        try {
            System.out.println("Client has started....");
            Socket soc = new Socket("localhost", 1313);
            for(;;){
                System.out.println("Enter the string: ");
                BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));
                String str = buf.readLine();
                PrintWriter out = new PrintWriter(soc.getOutputStream(), true);
                out.println(str);
                BufferedReader in = new BufferedReader(new InputStreamReader(soc.getInputStream()));
                System.out.println(in.readLine());
            }
        } catch (Exception e) {
            // TODO: handle exception
            System.out.println(e);
        }
    }
}


//Multicasting
//Server Code
public class MulticastServer {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        try {
            String group = "226.4.5.6";
            MulticastSocket ms = new MulticastSocket();
            System.out.println("Enter the msg: ");
            String msg = sc.nextLine();
            DatagramPacket dp = new DatagramPacket(msg.getBytes(), msg.length(), InetAddress.getByName(group), 5000);
            ms.send(dp);
            ms.close();
        } catch (Exception e) {
            // TODO: handle exception
            System.out.println(e);
        }
        sc.close();
    }
}
//Client Code
public class MulticastClient {
    public static void main(String[] args) throws IOException {
        try {
            String group = args[0];
            MulticastSocket ms = new MulticastSocket(5000);
            ms.joinGroup(InetAddress.getByName(group));
            byte[] buf = new byte[1024];
            DatagramPacket dp = new DatagramPacket(buf, 1024);
            ms.receive(dp);
            String str = new String(dp.getData(), 0, dp.getLength());
            System.out.println(str);
            ms.leaveGroup(InetAddress.getByName(group));
            ms.close();
        } catch (Exception e) {
            // TODO: handle exception
            System.out.println(e);
        }
    }    
}


//String Conversion
//Server
public class Server {
    public static void main(String[] args) throws IOException {
        try {
            System.out.println("Server is ready...");
            ServerSocket ss = new ServerSocket(1313);
            Socket soc = ss.accept();
            System.out.println("The string is accepted");
            BufferedReader in = new BufferedReader(new InputStreamReader(soc.getInputStream()));
            String str = in.readLine();
            str = str.toUpperCase();
            PrintWriter out = new PrintWriter(soc.getOutputStream(), true);
            out.println("The uppercase is: " + str);
            ss.close();
        } catch (Exception e) {
            // TODO: handle exception
            System.out.println(e);
        }
    }
}
//Client
public class Client {
    public static void main(String[] args) throws UnknownHostException, IOException {
        try {
            System.out.println("Client has started");
            Socket soc = new Socket("localhost", 1313);
            System.out.println("Enter the string: ");
            BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));
            String str = buf.readLine();
            PrintWriter out = new PrintWriter(soc.getOutputStream(), true);
            out.println(str);
            BufferedReader in = new BufferedReader(new InputStreamReader(soc.getInputStream()));
            System.out.println(in.readLine());
            soc.close();
        } catch (Exception e) {
            // TODO: handle exception
            System.out.println(e);
        }
    }    
}


//CRC
import java.util.*;
class CRCExample {
    public static void main(String args[]) {
        Scanner scan = new Scanner(System.in);
        int size; 
        System.out.println("Enter the size of the data array: ");  
        size = scan.nextInt();
        int data[] = new int[size];
        System.out.println("Enter data bits in the array one by one: ");  
        for(int i = 0 ; i < size ; i++) {  
            System.out.println("Enter bit " + (size-i) + ":");  
            data[i] = scan.nextInt();  
        }  
        System.out.println("Enter the size of the divisor array:");  
        size = scan.nextInt();  
        int divisor[] = new int[size];  
        System.out.println("Enter divisor bits in the array one by one: ");  
        for(int i = 0 ; i < size ; i++) {  
            System.out.println("Enter bit " + (size-i) + ":");  
            divisor[i] = scan.nextInt();  
        }
        int rem[] = divideDataWithDivisor(data, divisor);  
        for(int i = 0; i < rem.length-1; i++) {  
            System.out.print(rem[i]);  
        }  
        System.out.println("\nGenerated CRC code is: ");  
          
        for(int i = 0; i < data.length; i++) {  
            System.out.print(data[i]);  
        }  
        for(int i = 0; i < rem.length-1; i++) {  
            System.out.print(rem[i]);  
        }  
        System.out.println();
        int sentData[] = new int[data.length + rem.length - 1];  
        System.out.println("Enter bits in the array which you want to send: ");  
        for(int i = 0; i < sentData.length; i++) {  
            System.out.println("Enter bit " +(sentData.length - 1)+ ":");  
            sentData[i] = scan.nextInt();  
        }  
        receiveData(sentData, divisor); 
        scan.close(); 
    }
    static int[] divideDataWithDivisor(int oldData[], int divisor[]) {
        int rem[] = new int[divisor.length];  
        int i;  
        int data[] = new int[oldData.length + divisor.length];
        System.arraycopy(oldData, 0, data, 0, oldData.length);  
        System.arraycopy(data, 0, rem, 0, divisor.length); 
        for(i = 0; i < oldData.length; i++) {  
            System.out.println((i+1) + ".) First data bit is : "+ rem[0]);  
            System.out.print("Remainder : ");  
            if(rem[0] == 1) { 
                for(int j = 1; j < divisor.length; j++) {  
                    rem[j-1] = exorOperation(rem[j], divisor[j]);  
                    System.out.print(rem[j-1]);  
                }  
            }  
            else { 
                for(int j = 1; j < divisor.length; j++) {  
                    rem[j-1] = exorOperation(rem[j], 0);  
                    System.out.print(rem[j-1]);  
                }  
            } 
            rem[divisor.length-1] = data[i+divisor.length];  
            System.out.println(rem[divisor.length-1]);  
        }  
        return rem;  
    }  
    static int exorOperation(int x, int y) {
        if(x == y) {  
            return 0;  
        }  
        return 1;  
    }
    static void receiveData(int data[], int divisor[]) {  
        int rem[] = divideDataWithDivisor(data, divisor);
        for(int i = 0; i < rem.length; i++) {  
            if(rem[i] != 0) { 
                System.out.println("Currupted data received...");  
                return;  
            }  
        }  
        System.out.println("Data received without any error.");  
    }  
}